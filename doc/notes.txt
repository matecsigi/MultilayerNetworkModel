Ugyan az, az egyiknek a fitness-e mégis -nan.
Miért lehet ez? -> szorzás lett az egyik összeadásból

  element fitness=182.724
  network=Network 28267168
Node 1
  ((((-1.000000*ID1)+(0.200000*ID4))+(0.200000*ID5))+(0.200000*ID6))
Node 2
  ((-1.000000*ID2)+(0.200000*ID4))
Node 3
  (((-1.000000*ID3)+(0.200000*ID4))+(0.200000*ID5))
Node 4
  (((((-1.000000*ID4)+(0.200000*ID1))+(0.200000*ID2))+(0.200000*ID3))+(0.200000*ID5))
Node 5
  (((((-1.000000*ID5)+(0.200000*ID1))+(0.200000*ID3))+(0.200000*ID4))+(0.200000*ID6))
Node 6
  ((((-1.000000*ID6)+(0.200000*ID1))+(0.200000*ID4))+(0.200000*ID5))

  element fitness=185.077
  network=Network 28267168
Node 1
  ((((-1.000000*ID1)+(0.200000*ID4))+(0.200000*ID5))+(0.200000*ID6))
Node 2
  ((-1.008157*ID2)+(0.200000*ID4))
Node 3
  (((-1.000000*ID3)+(0.200000*ID4))+(0.200000*ID5))
Node 4
  (((((-1.000000*ID4)+(0.200000*ID1))+(0.200000*ID2))+(0.200000*ID3))+(0.200000*ID5))
Node 5
  (((((-1.000000*ID5)+(0.200000*ID1))+(0.200000*ID3))+(0.200000*ID4))+(0.200000*ID6))
Node 6
  ((((-1.000000*ID6)+(0.200000*ID1))+(0.200000*ID4))+(0.200000*ID5))

  element fitness=-nan
  network=Network 28267168
Node 1
  ((((-1.000000*ID1)+(0.200000*ID4))+(0.200000*ID5))+(0.200000*ID6))
Node 2
  ((-1.008157*ID2)+(0.200000*ID4))
Node 3
  (((-1.000000*ID3)+(0.200000*ID4))+(0.200000*ID5))
Node 4
  (((((-1.000000*ID4)+(0.200000*ID1))+(0.200000*ID2))+(0.200000*ID3))*(0.200000*ID5))
Node 5
  (((((-1.000000*ID5)+(0.200000*ID1))+(0.200000*ID3))+(0.200000*ID4))+(0.200000*ID6))
Node 6
  ((((-1.000000*ID6)+(0.200000*ID1))+(0.200000*ID4))+(0.200000*ID5))




Using the Boost property tree library for JSON (slow way of doing json)

  ptree pt;
  ptree multilayer_node;

  std::vector<Layer*> layers = this->getLayers();
  for(std::vector<Layer*>::iterator it=layers.begin(); it != layers.end(); ++it)
  {
    ptree layer_node;
    layer_node.put("id", (*it)->getId());
    
    std::vector<Network*> networks = (*it)->getNetworks();
    for(std::vector<Network*>::iterator it2=networks.begin(); it2 != networks.end(); ++it2)
    {
      ptree network_node;
      network_node.put("id", (*it2)->getId());
      layer_node.add_child("Networks.Network", network_node);
    }

    multilayer_node.add_child("Layer", layer_node);
  }

  pt.add_child("MultilayerNetwork.Layers", multilayer_node);

  std::ostringstream buf; 
  write_json (buf, pt, false);
  std::string json = buf.str();
  std::cout<<json<<std::endl;
